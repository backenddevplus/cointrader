@Name('LAST_TRADE_WINDOW')	
create window LastTradeWindow.std:groupwin(market).std:lastevent() as select * from Trade;

@Name('LAST_Book_WINDOW')	
create window LastBookWindow.std:groupwin(market).std:lastevent() as select * from Book;

@Name('LAST_BAR_WINDOW')	
create window LastBarWindow.std:groupwin(interval,market).win:length(2) as select * from Bar;

@Priority(10)	
insert into LastTradeWindow select * from Trade (Trade.market in (BaseStrategy.getMarkets()), Trade.priceCount>0, Trade.volumeCount!=0, Trade.timestamp>= coalesce((select max(timestamp) from LastTradeWindow where LastTradeWindow.market=Trade.market),0));

@Priority(10)	
insert into LastBookWindow select * from Book (Book.bidVolumeAsDouble>0, Book.askVolumeAsDouble<0,Book.market in (BaseStrategy.getMarkets()));

@Priority(10)	
insert into LastBarWindow select * from Bar b where not exists (select id from LastBarWindow l where l.timestamp=b.timestamp and b.interval=l.interval and b.market=l.market);