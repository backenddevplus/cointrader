package org.cryptocoinpartners.schema;

import java.io.Serializable;
import java.util.UUID;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.MappedSuperclass;
import javax.persistence.PostPersist;
import javax.persistence.Transient;
import javax.persistence.Version;

/**
 * @author Tim Olson
 */
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@MappedSuperclass
public abstract class EntityBase implements Serializable, Delayed {

    /**
     * 
     */
    private static final long serialVersionUID = -7893439827939854533L;
    private static long delay = 1000;

    private long startTime;

    @Override
    @Transient
    public long getDelay(TimeUnit unit) {
        long diff = startTime - System.currentTimeMillis();
        return unit.convert(diff, TimeUnit.MILLISECONDS);
    }

    @Override
    public int compareTo(Delayed o) {
        if (this.startTime < ((EntityBase) o).startTime) {
            return -1;
        }
        if (this.startTime > ((EntityBase) o).startTime) {
            return 1;
        }
        return 0;
    }

    @Id
    @Column(columnDefinition = "BINARY(16)", length = 16, updatable = true, nullable = false)
    public UUID getId() {
        ensureId();
        return id;
    }

    @Version
    @Column(name = "version", columnDefinition = "integer DEFAULT 0", nullable = false)
    public long getVersion() {
        //  if (version == null)
        //    return 0;
        return version;
    }

    public void setVersion(long version) {
        this.version = version;
    }

    @Override
    public String toString() {
        return "DelayedRunnable [delayMS=" + delay + ", getDelay(ms)=" + getDelay(TimeUnit.MILLISECONDS) + "]";
    }

    @Transient
    public Integer getRetryCount() {
        if (retryCount == null)
            return 0;
        return retryCount;
    }

    public void setRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
    }

    public void incermentRetryCount() {
        retryCount = getRetryCount() + 1;
    }

    @Override
    public boolean equals(Object o) {
        // generated by IDEA
        if (this == o)
            return true;
        if (!(o instanceof EntityBase))
            return false;
        EntityBase that = (EntityBase) o;
        // Need to check these are not null as assinged when persisted so might not yet be present when objects are compared
        if (id == null || that.id == null)
            return false;
        return id.equals(that.id);

    }

    @Override
    public int hashCode() {
        ensureId();
        return id.hashCode();
    }

    // JPA
    protected EntityBase() {
    }

    protected void setId(UUID id) {
        this.id = id;
    }

    @PostPersist
    private void postPersist() {
        //  setVersion(getVersion() + 1);
    }

    public abstract void persit();

    public abstract void detach();

    public abstract void merge();

    private void ensureId() {
        if (id == null)
            id = UUID.randomUUID();
        if (startTime == 0)
            startTime = System.currentTimeMillis() + delay;
    }

    protected UUID id;
    protected long version;
    protected Integer retryCount;

}
