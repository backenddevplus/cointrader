// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by: TypeSafeEnumeration.vsl in andromda-java-cartridge.
// Model Class: Data::AlgoTrader::com.algoTrader::enumeration::Status
// Metafacade: org.andromda.metafacades.uml.Enumeration
// Stereotype: Enumeration
//
package org.cryptocoinpartners.enumeration;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * 
 */
public enum ContingencyType {
	DEFAULT("DEFAULT"),
	/** 0 The other order in the pair will be cancelled when the opposite order if filled or partially filled */
	ONE_CANCELS_OTHER("ONE_CANCELS_OTHER"),
	/** 0 The other order in the pair will be triggered when the opposite order if filled */
	ONE_TRIGGERS_OTHER("ONE_TRIGGERS_OTHER");
	/** 0 The other order in the pair will be triggered when the opposite order if filled */

	private final String enumValue;

	/**
	 * The constructor with enumeration literal value allowing super classes to access it.
	 */
	private ContingencyType(String value) {
		this.enumValue = value;
	}

	/**
	 * Retrieves an instance of Status from <code>its name</code>.
	 * 
	 * @param name the name to create the Status from.
	 * @return The enumeration literal named after the 'name' argument
	 */
	public static ContingencyType fromString(String name) {
		return ContingencyType.valueOf(name);
	}

	/**
	 * Returns an enumeration literal String <code>value</code>. Required by JAXB2 enumeration implementation
	 * 
	 * @return String with corresponding value
	 */
	public String value() {
		return this.enumValue;
	}

	/**
	 * Returns an instance of Status from String <code>value</code>. Required by JAXB2 enumeration implementation
	 * 
	 * @param value the value to create the Status from.
	 * @return static Enumeration with corresponding value
	 */
	public static ContingencyType fromValue(String value) {
		for (ContingencyType enumName : ContingencyType.values()) {
			if (enumName.getValue().equals(value)) {
				return enumName;
			}
		}
		throw new IllegalArgumentException("Status.fromValue(" + value + ')');
	}

	/**
	 * Gets the underlying value of this type safe enumeration. This method is necessary to comply with DaoBase implementation.
	 * 
	 * @return The name of this literal.
	 */
	public String getValue() {
		return this.enumValue;
	}

	/**
	 * Returns an unmodifiable list containing the literals that are known by this enumeration.
	 * 
	 * @return A List containing the actual literals defined by this enumeration, this list can not be modified.
	 */
	public static List<String> literals() {
		return ContingencyType.literals;
	}

	/**
	 * Returns an unmodifiable list containing the names of the literals that are known by this enumeration.
	 * 
	 * @return A List containing the actual names of the literals defined by this enumeration, this list can not be modified.
	 */
	public static List<String> names() {
		return ContingencyType.names;
	}

	private static Map<String, ContingencyType> values = new LinkedHashMap<String, ContingencyType>(7, 1);
	private static List<String> literals = new ArrayList<String>(7);
	private static List<String> names = new ArrayList<String>(7);
	private static List<ContingencyType> valueList = new ArrayList<ContingencyType>(7);

	/**
	 * Initializes the values.
	 */
	static {
		synchronized (ContingencyType.values) {
			ContingencyType.values.put(DEFAULT.enumValue, DEFAULT);
			ContingencyType.values.put(ONE_CANCELS_OTHER.enumValue, ONE_CANCELS_OTHER);
			ContingencyType.values.put(ONE_TRIGGERS_OTHER.enumValue, ONE_TRIGGERS_OTHER);

		}
		synchronized (ContingencyType.valueList) {
			ContingencyType.valueList.add(DEFAULT);
			ContingencyType.valueList.add(ONE_CANCELS_OTHER);
			ContingencyType.valueList.add(ONE_TRIGGERS_OTHER);

			ContingencyType.valueList = Collections.unmodifiableList(valueList);
		}
		synchronized (ContingencyType.literals) {
			ContingencyType.literals.add(DEFAULT.enumValue);
			ContingencyType.literals.add(ONE_CANCELS_OTHER.enumValue);
			ContingencyType.literals.add(ONE_TRIGGERS_OTHER.enumValue);

			ContingencyType.literals = Collections.unmodifiableList(literals);
		}
		synchronized (ContingencyType.names) {
			ContingencyType.names.add("DEFAULT");
			ContingencyType.names.add("ONE_CANCELS_OTHER");
			ContingencyType.names.add("ONE_TRIGGERS_OTHER");

			ContingencyType.names = Collections.unmodifiableList(names);
		}
	}
	// type-safe-enumeration-object java merge-point
}
